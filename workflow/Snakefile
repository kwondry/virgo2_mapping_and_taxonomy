localrules: cat_reads

import pandas as pd
import yaml
import os
from snakemake.utils import validate

configfile: "config/config.yaml"

# Validate samplesheet against schema
validate(config["input"]["sample_sheet"], "config/samplesheet.schema.yaml")

sample_list = pd.read_csv(config["input"]["sample_sheet"], index_col=False).to_dict(orient="records")
ALL_SAMPLES = [r['sample'] for r in sample_list]

rule target:
    input:
        os.path.join(config["output"]["results_dir"], f"{config['output']['prefix']}_metagenomic_relative_abundance.csv")

# set amount of memory and increase if it fails
def get_mem_mb(wildcards, attempt):
    return config["resources"]["virgo2"]["mem_mb"] + attempt * config["resources"]["virgo2"]["mem_increment"]

def get_reads_for_sample(wildcards):
    read_paths = []
    for record in sample_list:
        if record['sample'] == wildcards.sample_id:
            read_paths.append(record['fastq_1'])
            if 'fastq_2' in record and record['fastq_2']:
                read_paths.append(record['fastq_2'])
    return read_paths

rule cat_reads:
    input:
        get_reads_for_sample
    output:
        "temp/00.cat_reads/{sample_id}.fq"
    shell:
        "cat {input} > {output}"

rule run_virgo2:
    input:
        reads = "temp/00.cat_reads/{sample_id}.fq"
    output:
        "temp/01.virgo2/{sample_id}.out"
    conda:
        "envs/virgo2.yaml"
    threads:
        config["resources"]["virgo2"]["threads"]
    resources:
        cpus_per_task = config["resources"]["virgo2"]["threads"],
        mem_mb = get_mem_mb,
        runtime = config["resources"]["virgo2"]["runtime"],
        partition = config["resources"]["virgo2"]["partition"]
    params:
        output_prefix = "temp/01.virgo2/{sample_id}",
        use_coverage = True
    script:
        "scripts/virgo2_map.py"

rule virgo2_combine:
    input:
        expand("temp/01.virgo2/{sample_id}.out", sample_id=ALL_SAMPLES)
    output:
        os.path.join(config["output"]["results_dir"], f"{config['output']['prefix']}.summary.NR.txt")
    conda:
        "envs/virgo2.yaml"
    threads:
        1
    resources:
        cpus_per_task = 1,
        mem_mb = config["resources"]["other"]["mem_mb"],
        runtime = config["resources"]["other"]["runtime"],
        partition = config["resources"]["other"]["partition"]
    script:
        "scripts/virgo2_compile.py"

rule virgo2_add_length:
    input:
        summary = os.path.join(config["output"]["results_dir"], f"{config['output']['prefix']}.summary.NR.txt"),
        database_dir = config["virgo2"]["database_dir"]
    output:
        os.path.join(config["output"]["results_dir"], f"{config['output']['prefix']}_NR_anno.csv")
    conda:
        "envs/virgo2.yaml"
    threads:
        1
    resources:
        mem_mb = config["resources"]["other"]["mem_mb"],
        runtime = config["resources"]["other"]["runtime"],
        partition = config["resources"]["other"]["partition"]
    script:
        "scripts/add_length_taxa.py"

rule virgo2_relative_abundance:
    input:
        os.path.join(config["output"]["results_dir"], f"{config['output']['prefix']}_NR_anno.csv")
    output:
        os.path.join(config["output"]["results_dir"], f"{config['output']['prefix']}_metagenomic_relative_abundance.csv")
    conda:
        "envs/virgo2.yaml"
    threads:
        1
    resources:
        mem_mb = config["resources"]["other"]["mem_mb"],
        runtime = config["resources"]["other"]["runtime"],
        partition = config["resources"]["other"]["partition"]
    script:
        "scripts/virgo2_relative_abundance.py"